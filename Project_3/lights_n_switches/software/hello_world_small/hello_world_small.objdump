
hello_world_small.elf:     file format elf32-littlenios2
hello_world_small.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000024c memsz 0x0000024c flags r-x
    LOAD off    0x0000126c vaddr 0x0000126c paddr 0x00001270 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001274 vaddr 0x00001274 paddr 0x00001274 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001270  2**0
                  CONTENTS
  2 .text         00000234  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00001254  00001254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000126c  00001270  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001274  00001274  00001274  2**2
                  ALLOC, SMALL_DATA
  6 .onchip       00000000  00001280  00001280  00001270  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b32  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000069b  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000792  00000000  00000000  000025e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005e8  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000018e  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00003690  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000448e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004491  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004495  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00004496  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000449f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000044b1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY
 26 .jdi          00003ac8  00000000  00000000  00004502  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000347ce  00000000  00000000  00007fca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001254 l    d  .rodata	00000000 .rodata
0000126c l    d  .rwdata	00000000 .rwdata
00001274 l    d  .bss	00000000 .bss
00001280 l    d  .onchip	00000000 .onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_small_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000116c g     F .text	0000002c alt_main
00001270 g       *ABS*	00000000 __flash_rwdata_start
00001198 g     F .text	00000038 alt_putstr
0000126c g     O .rwdata	00000004 jtag_uart
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001278 g     O .bss	00000004 alt_argv
0000926c g       *ABS*	00000000 _gp
00001280 g       *ABS*	00000000 __bss_end
00001228 g     F .text	00000004 alt_dcache_flush_all
00001270 g       *ABS*	00000000 __ram_rwdata_end
0000126c g       *ABS*	00000000 __ram_rodata_end
00001280 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000011f4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000011f0 g     F .text	00000004 alt_sys_init
0000126c g       *ABS*	00000000 __ram_rwdata_start
00001254 g       *ABS*	00000000 __ram_rodata_start
00001280 g       *ABS*	00000000 __alt_stack_base
00001274 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000018 main
00001274 g     O .bss	00000004 alt_envp
00001254 g       *ABS*	00000000 __flash_rodata_start
000011d0 g     F .text	00000020 alt_irq_init
0000127c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001270 g       *ABS*	00000000 _edata
00001280 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001230 g     F .text	00000008 altera_nios2_qsys_irq_init
00001000 g       *ABS*	00000000 __alt_mem_onchip
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001238 g     F .text	0000001c strlen
0000122c g     F .text	00000004 alt_icache_flush_all
00001074 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a49b14 	ori	gp,gp,37484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10849d14 	ori	r2,r2,4724

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4a014 	ori	r3,r3,4736

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7dd8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010740 	call	1074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000116c0 	call	116c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7dec>

0000105c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
    105c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1060:	01000034 	movhi	r4,0
    1064:	21049504 	addi	r4,r4,4692
 */

#include "sys/alt_stdio.h"

int main()
{ 
    1068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	00011980 	call	1198 <alt_putstr>
    1070:	003fff06 	br	1070 <_gp+0xffff7e04>

00001074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1074:	deffff04 	addi	sp,sp,-4
    1078:	dfc00015 	stw	ra,0(sp)
    107c:	00c00034 	movhi	r3,0
    1080:	18c49b04 	addi	r3,r3,4716
    1084:	01000034 	movhi	r4,0
    1088:	21049c04 	addi	r4,r4,4720

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    108c:	1900061e 	bne	r3,r4,10a8 <alt_load+0x34>
    1090:	00c00034 	movhi	r3,0
    1094:	18c40804 	addi	r3,r3,4128
    1098:	01000034 	movhi	r4,0
    109c:	21040804 	addi	r4,r4,4128
    10a0:	1900141e 	bne	r3,r4,10f4 <alt_load+0x80>
    10a4:	00000d06 	br	10dc <alt_load+0x68>
    10a8:	01400034 	movhi	r5,0
    10ac:	29449c04 	addi	r5,r5,4720
    10b0:	00bfff04 	movi	r2,-4
    10b4:	28cbc83a 	sub	r5,r5,r3
    10b8:	288a703a 	and	r5,r5,r2
    10bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    10c0:	117ff326 	beq	r2,r5,1090 <_gp+0xffff7e24>
    10c4:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    10c8:	39c00017 	ldw	r7,0(r7)
    10cc:	188d883a 	add	r6,r3,r2
    10d0:	10800104 	addi	r2,r2,4
    10d4:	31c00015 	stw	r7,0(r6)
    10d8:	003ff906 	br	10c0 <_gp+0xffff7e54>
    10dc:	00c00034 	movhi	r3,0
    10e0:	18c49504 	addi	r3,r3,4692
    10e4:	01000034 	movhi	r4,0
    10e8:	21049504 	addi	r4,r4,4692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10ec:	1900121e 	bne	r3,r4,1138 <alt_load+0xc4>
    10f0:	00000d06 	br	1128 <alt_load+0xb4>
    10f4:	01400034 	movhi	r5,0
    10f8:	29440804 	addi	r5,r5,4128
    10fc:	00bfff04 	movi	r2,-4
    1100:	28cbc83a 	sub	r5,r5,r3
    1104:	288a703a 	and	r5,r5,r2
    1108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    110c:	117ff326 	beq	r2,r5,10dc <_gp+0xffff7e70>
    1110:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    1114:	39c00017 	ldw	r7,0(r7)
    1118:	188d883a 	add	r6,r3,r2
    111c:	10800104 	addi	r2,r2,4
    1120:	31c00015 	stw	r7,0(r6)
    1124:	003ff906 	br	110c <_gp+0xffff7ea0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1128:	00012280 	call	1228 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    112c:	dfc00017 	ldw	ra,0(sp)
    1130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1134:	000122c1 	jmpi	122c <alt_icache_flush_all>
    1138:	01400034 	movhi	r5,0
    113c:	29449b04 	addi	r5,r5,4716
    1140:	00bfff04 	movi	r2,-4
    1144:	28cbc83a 	sub	r5,r5,r3
    1148:	288a703a 	and	r5,r5,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    114c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1150:	117ff526 	beq	r2,r5,1128 <_gp+0xffff7ebc>
    1154:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    1158:	39c00017 	ldw	r7,0(r7)
    115c:	188d883a 	add	r6,r3,r2
    1160:	10800104 	addi	r2,r2,4
    1164:	31c00015 	stw	r7,0(r6)
    1168:	003ff906 	br	1150 <_gp+0xffff7ee4>

0000116c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    116c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1170:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1174:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1178:	00011d00 	call	11d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    117c:	00011f00 	call	11f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1180:	d1200417 	ldw	r4,-32752(gp)
    1184:	d1600317 	ldw	r5,-32756(gp)
    1188:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    118c:	dfc00017 	ldw	ra,0(sp)
    1190:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1194:	000105c1 	jmpi	105c <main>

00001198 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1198:	defffe04 	addi	sp,sp,-8
    119c:	dc000015 	stw	r16,0(sp)
    11a0:	dfc00115 	stw	ra,4(sp)
    11a4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11a8:	00012380 	call	1238 <strlen>
    11ac:	01000034 	movhi	r4,0
    11b0:	21049b04 	addi	r4,r4,4716
    11b4:	800b883a 	mov	r5,r16
    11b8:	100d883a 	mov	r6,r2
    11bc:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	dc000017 	ldw	r16,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11cc:	00011f41 	jmpi	11f4 <altera_avalon_jtag_uart_write>

000011d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    11d8:	00012300 	call	1230 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11dc:	00800044 	movi	r2,1
    11e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11e4:	dfc00017 	ldw	ra,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    11f0:	f800283a 	ret

000011f4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    11f4:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    11f8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    11fc:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1200:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1204:	2900072e 	bgeu	r5,r4,1224 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1208:	31c00037 	ldwio	r7,0(r6)
    120c:	39ffffec 	andhi	r7,r7,65535
    1210:	383ffd26 	beq	r7,zero,1208 <_gp+0xffff7f9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1214:	29c00007 	ldb	r7,0(r5)
    1218:	19c00035 	stwio	r7,0(r3)
    121c:	29400044 	addi	r5,r5,1
    1220:	003ff806 	br	1204 <_gp+0xffff7f98>

  return count;
}
    1224:	f800283a 	ret

00001228 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1228:	f800283a 	ret

0000122c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    122c:	f800283a 	ret

00001230 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1230:	000170fa 	wrctl	ienable,zero
    1234:	f800283a 	ret

00001238 <strlen>:
    1238:	2005883a 	mov	r2,r4
    123c:	10c00007 	ldb	r3,0(r2)
    1240:	18000226 	beq	r3,zero,124c <strlen+0x14>
    1244:	10800044 	addi	r2,r2,1
    1248:	003ffc06 	br	123c <_gp+0xffff7fd0>
    124c:	1105c83a 	sub	r2,r2,r4
    1250:	f800283a 	ret
